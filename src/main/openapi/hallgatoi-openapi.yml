openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/student/{id}:
    put:
      tags:
      - student-controller
      operationId: modifyStudent
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
  /api/course/{courseId}:
    put:
      tags:
      - course-controller
      operationId: modifyCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDto'
  /api/student/insert_students:
    post:
      tags:
      - student-controller
      operationId: insertStudents
      responses:
        '200':
          description: OK
  /api/teachers/{id}:
    get:
      tags:
      - teacher-controller
      operationId: findById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherDto'
  /api/student:
    get:
      tags:
      - student-controller
      operationId: getEveryStudent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentDto'
  /api/history/{id}/student/{timeInMilli}:
    get:
      tags:
      - history-controller
      operationId: getStudentHistoryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: timeInMilli
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryDataStudentDto'
  /api/history/{id}/course:
    get:
      tags:
      - history-controller
      operationId: getCourseHistoryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryDataCourseDto'
  /api/course/search:
    get:
      tags:
      - course-controller
      operationId: searchCourse
      parameters:
      - name: full
        in: query
        required: false
        schema:
          type: boolean
      - schema:
          type: integer
        in: query
        name: page
      - schema:
          type: integer
        in: query
        name: size
      - schema:
          type: string
        in: query
        name: sort
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDto'
  /api/student/delete_all:
    delete:
      tags:
      - student-controller
      operationId: deleteAllStudent
      responses:
        '200':
          description: OK
  /api/students/{id}/profile:
    parameters:
    - schema:
        type: string
      name: id
      in: path
      required: true
    get:
      summary: Your GET endpoint
      tags:
      - student-controller
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      operationId: getProfilePicture
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
    post:
      summary: ''
      operationId: uploadProfilePicture
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: binary
      tags:
      - student-controller
    delete:
      operationId: deleteProfilePicture
      summary: ''
      tags:
      - student-controller
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: OK
components:
  schemas:
    CourseDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        teachers:
          type: array
          items:
            $ref: '#/components/schemas/TeacherDto'
        students:
          type: array
          items:
            $ref: '#/components/schemas/StudentDto'
    StudentDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        semester:
          type: integer
          format: int32
    TeacherDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    Predicate:
      type: object
    Pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
        offset:
          type: integer
          format: int64
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    HistoryDataCourseDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CourseDto'
        revType:
          type: string
          enum:
          - ADD
          - MOD
          - DEL
        revision:
          type: integer
          format: int32
        date:
          type: string
          format: date-time
    HistoryDataStudentDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/StudentDto'
        revType:
          type: string
          enum:
          - ADD
          - MOD
          - DEL
        revision:
          type: integer
          format: int32
        date:
          type: string
          format: date-time